<?php

declare(strict_types=1);
	class HAconnect extends IPSModule
	{
		public function Create()
		{
			//Never delete this line!
			parent::Create();
			$this->RegisterPropertyString('ha_url', '');
			$this->RegisterPropertyString('ha_token', '');
		}


		public function Destroy()
		{
			//Never delete this line!
			parent::Destroy();
		}
		
		/**
		 * Sendet eine Nachricht ans IP-Symcon Logfile
		 * @param string $message Die Nachricht
		 * @param int $level Log-Level (0=INFO, 1=NOTIFY, 2=WARNING, 3=ERROR, 4=DEBUG)
		private function LogMessage($message, $level = 0)
		{
			IPS_LogMessage('HAconnect', $message);
		}

		public function ApplyChanges()
		{
			//Never delete this line!
			parent::ApplyChanges();
		}

		/**
		 * Ruft alle Geräte von Home Assistant per REST API ab.
		 * @return array|false
		 */
		public function FetchDevices()
		{
			$url = $this->ReadPropertyString('ha_url');
			$token = $this->ReadPropertyString('ha_token');
			if ($url === '' || $token === '') {
				$this->SendDebug('FetchDevices', 'URL oder Token nicht gesetzt', 0);
				return false;
			}

			$apiUrl = rtrim($url, '/') . '/api/states';
			$opts = [
				'http' => [
					'header' => [
						'Authorization: Bearer ' . $token,
						'Content-Type: application/json'
					],
					'method' => 'GET',
					'timeout' => 10
				]
			];
			$context = stream_context_create($opts);
			$result = @file_get_contents($apiUrl, false, $context);
			if ($result === false) {
				$this->SendDebug('FetchDevices', 'Fehler beim Abrufen der Geräte', 0);
				return false;
			}
			$data = json_decode($result, true);
			if (!is_array($data)) {
				$this->SendDebug('FetchDevices', 'Antwort ist kein gültiges JSON', 0);
				return false;
			}
			return $data;
		}

		/**
		 * Dynamisches Konfigurationsformular mit Geräteliste.
		 * @return string
		 */
		public function GetConfigurationForm()
		{
			$form = json_decode(file_get_contents(__DIR__ . '/form.json'), true);
			$devices = $this->FetchDevices();
			$listData = [];
			if (is_array($devices)) {
				foreach ($devices as $entity) {
					$entityId = $entity['entity_id'] ?? '';
					$listData[] = [
						'entity_id' => $entityId,
						'friendly_name' => $entity['attributes']['friendly_name'] ?? '',
						'state' => $entity['state'] ?? '',
						'create' => [
							'moduleID' => '{8DF4E3B9-1FF2-B0B3-649E-117AC0B355FD}',
							'configuration' => [
								'entity_id' => $entityId
							]
						]
					];
				}
			}
			// Configurator-Element befüllen
			foreach ($form['actions'] as &$action) {
				if (isset($action['type']) && $action['type'] === 'Configurator' && $action['name'] === 'DeviceConfigurator') {
					$action['values'] = $listData;
				}
			}
			return json_encode($form);
		}

		/**
		 * Erstellt eine neue HAdevice-Instanz für das ausgewählte Gerät.
		 * @param array $selectedRows
		 */
		public function CreateHAdeviceInstance(array $selectedRows)
		{
			$this->LogMessage('--- Starte Instanz-Erstellung ---');
			$this->SendDebug('CreateHAdeviceInstance', 'Anzahl ausgewählter Zeilen: ' . count($selectedRows), 0);
			
			foreach ($selectedRows as $row) {
				$entityId = $row['entity_id'] ?? '';
				$name = $row['friendly_name'] ?? $entityId;
				
				$this->LogMessage('Erstelle HAdevice für: ' . $entityId);
				$this->SendDebug('CreateHAdeviceInstance', 'Erstelle Instanz für: ' . $entityId, 0);
				
				if ($entityId === '') {
					$this->SendDebug('CreateHAdeviceInstance', 'entity_id fehlt.', 0);
					$this->LogMessage('Fehler: entity_id fehlt');
					continue;
				}
				
				// Prüfe, ob Instanz bereits existiert
				$existingInstances = IPS_GetInstanceListByModuleID('{8DF4E3B9-1FF2-B0B3-649E-117AC0B355FD}');
				$existingInstanceID = 0;
				
				foreach ($existingInstances as $instanceID) {
					$instanceEntityId = IPS_GetProperty($instanceID, 'entity_id');
					if ($instanceEntityId === $entityId) {
						$existingInstanceID = $instanceID;
						break;
					}
				}
				
				if ($existingInstanceID > 0) {
					$this->SendDebug('CreateHAdeviceInstance', 'Instanz existiert bereits mit ID: ' . $existingInstanceID, 0);
					$this->LogMessage('HAdevice für ' . $entityId . ' existiert bereits: ' . $existingInstanceID);
					
					// Aktualisiere Variablen der bestehenden Instanz
					$this->CreateVariablesForDevice($existingInstanceID, $entityId);
					continue;
				}
				
				// Neue Instanz erstellen
				try {
					$moduleID = '{8DF4E3B9-1FF2-B0B3-649E-117AC0B355FD}'; // HAdevice
					$this->LogMessage', 'Erstelle Instanz mit ModuleID: ' . $moduleID);
					$instID = IPS_CreateInstance($moduleID);
					
					if ($instID === false) {
						$this->SendDebug('CreateHAdeviceInstance', 'Fehler beim Erstellen der Instanz!', 0);
						$this->LogMessage('Fehler beim Erstellen der HAdevice-Instanz!');
						continue;
					}
					
					$this->LogMessage', 'Instanz erstellt mit ID: ' . $instID);
					
					// Properties setzen
					IPS_SetProperty($instID, 'entity_id', $entityId);
					IPS_SetProperty($instID, 'parent_id', $this->InstanceID);
					
					// Im Objektbaum einordnen
					IPS_SetParent($instID, $this->InstanceID);
					$this->LogMessage', 'Instanz im Objektbaum eingeordnet und Properties gesetzt');
					
					// Änderungen anwenden
					IPS_ApplyChanges($instID);
					$this->LogMessage', 'ApplyChanges ausgeführt');
					
					// Instanzname setzen
					IPS_SetName($instID, $name);
					$this->LogMessage', 'Instanz benannt: ' . $name);
					
					// Variablen direkt erstellen
					$this->CreateVariablesForDevice($instID, $entityId);
					
					$this->SendDebug('CreateHAdeviceInstance', 'Instanz erfolgreich erstellt: ' . $instID, 0);
					$this->LogMessage', 'HAdevice für ' . $entityId . ' erfolgreich erstellt!');
				} catch (Exception $e) {
					$this->SendDebug('CreateHAdeviceInstance', 'Exception beim Erstellen: ' . $e->getMessage(), 0);
					$this->LogMessage', 'FEHLER beim Erstellen: ' . $e->getMessage());
				}
			}
			
			$this->LogMessage', '--- Instanz-Erstellung abgeschlossen ---');
		}

		public function CreateAllHAdeviceInstances()
		{
			$devices = $this->FetchDevices();
			foreach ($devices as $entity) {
				$entityId = $entity['entity_id'] ?? '';
				$name = $entity['attributes']['friendly_name'] ?? $entityId;
				if ($entityId === '') {
					continue;
				}
				$moduleID = '{8DF4E3B9-1FF2-B0B3-649E-117AC0B355FD}';
				$instID = IPS_CreateInstance($moduleID);
				IPS_SetProperty($instID, 'entity_id', $entityId);
				IPS_ApplyChanges($instID);
				IPS_SetName($instID, $name);
			}
		}

		/**
		 * Erstellt Variablen für eine HAdevice-Instanz direkt aus HAconnect heraus.
		 * @param int $instanceID ID der HAdevice-Instanz
		 * @param string $entityId Entity ID des Home Assistant Geräts
		 */
		private function CreateVariablesForDevice($instanceID, $entityId)
		{
			$this->SendDebug('CreateVariablesForDevice', 'Erstelle Variablen für Instanz ' . $instanceID . ' mit entity_id: ' . $entityId, 0);
			
			// Gerät aus Home Assistant abrufen
			$devices = $this->FetchDevices();
			$device = null;
			foreach ($devices as $entity) {
				if (($entity['entity_id'] ?? '') === $entityId) {
					$device = $entity;
					break;
				}
			}
			
			if ($device === null) {
				$this->SendDebug('CreateVariablesForDevice', 'Gerät mit entity_id nicht gefunden: ' . $entityId, 0);
				$this->LogMessage', 'Gerät nicht gefunden: ' . $entityId);
				return;
			}
			
			$this->SendDebug('CreateVariablesForDevice', 'Gerät gefunden: ' . ($device['attributes']['friendly_name'] ?? $entityId), 0);
			
			// Haupt-Statusvariable
			$varId = $this->CreateVariableForDevice($instanceID, 'State', 'Status', 3, $device['state'] ?? '');
			
			// Attribute als Variablen
			if (isset($device['attributes']) && is_array($device['attributes'])) {
				foreach ($device['attributes'] as $key => $value) {
					$ident = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
					$varValue = is_scalar($value) ? (string)$value : json_encode($value);
					$this->CreateVariableForDevice($instanceID, $ident, $key, 3, $varValue);
				}
			}
			
			$this->LogMessage', 'Variablen für \''. $entityId . '\' in Instanz ' . $instanceID . ' erstellt.');
		}
		
		/**
		 * Erstellt eine einzelne Variable für eine HAdevice-Instanz
		 * @param int $instanceID ID der Instanz
		 * @param string $ident Identifikator
		 * @param string $name Name der Variable
		 * @param int $type Variablentyp (0=Bool, 1=Int, 2=Float, 3=String)
		 * @param mixed $value Wert
		 * @return int ID der erstellten/aktualisierten Variable
		 */
		private function CreateVariableForDevice($instanceID, $ident, $name, $type, $value)
		{
			// Prüfe, ob Variable existiert
			$varId = @IPS_GetObjectIDByIdent($ident, $instanceID);
			
			// Falls nicht, erstelle sie
			if ($varId === false) {
				$varId = IPS_CreateVariable($type);
				IPS_SetParent($varId, $instanceID);
				IPS_SetIdent($varId, $ident);
				IPS_SetName($varId, $name);
			}
			
			// Wert setzen
			if ($type === 0) { // Boolean
				SetValueBoolean($varId, (bool)$value);
			} elseif ($type === 1) { // Integer
				SetValueInteger($varId, (int)$value);
			} elseif ($type === 2) { // Float
				SetValueFloat($varId, (float)$value);
			} else { // String
				SetValueString($varId, (string)$value);
			}
			
			return $varId;
		}
		
		/**
		 * Test-Methode zum Debuggen der Variablen-Erstellung (kann über Konsole aufgerufen werden)
		 */
		public function TestDeviceVariableCreation()
		{
			$this->LogMessage('--- Start Variablen-Test ---');
			
			// 1. Prüfe, ob Geräte von Home Assistant abrufbar sind
			$devices = $this->FetchDevices();
			$this->LogMessage('Gefundene Geräte: ' . count($devices));
			
			if (count($devices) === 0) {
				$this->LogMessage('FEHLER: Keine Geräte von Home Assistant erhalten!', 3); // ERROR
				return;
			}
			
			// 2. Wähle erstes Gerät zum Testen
			$device = $devices[0];
			$entityId = $device['entity_id'] ?? 'unbekannt';
			$this->LogMessage('Test mit Gerät: ' . $entityId);
			
			// 3. Erstelle Testvariable direkt unter HAconnect zum Test
			$this->RegisterVariableString('TestVar', 'Test Variable');
			$this->SetValue('TestVar', 'Test ' . date('H:i:s'));
			$this->LogMessage('Testvariable unter HAconnect erstellt');
			
			// 4. Suche existierende HAdevice-Instanzen
			$instanceIDs = IPS_GetInstanceListByModuleID('{8DF4E3B9-1FF2-B0B3-649E-117AC0B355FD}');
			$this->LogMessage('Gefundene HAdevice-Instanzen: ' . count($instanceIDs));
			
			if (count($instanceIDs) > 0) {
				// 5. Teste mit erster gefundener Instanz
				$instID = $instanceIDs[0];
				$this->LogMessage('Teste mit Instanz ID: ' . $instID);
				
				// 6. Erstelle direkt Variablen unter dieser Instanz
				$testVarID = $this->CreateVariableForDevice($instID, 'TestVar', 'Test Direkt', 3, 'Test Wert');
				$this->LogMessage('Test-Variable direkt erstellt: ' . $testVarID);
				
				// 7. Versuche vollständige Variablen-Erstellung 
				$this->CreateVariablesForDevice($instID, $entityId);
				$this->LogMessage('Versuch, Variablen für ' . $entityId . ' zu erstellen abgeschlossen');
			}
			
			$this->LogMessage('--- Ende Variablen-Test ---');
		}
		
		private function GetHAdeviceModuleID()
		{
			// Lese module.json von HAdevice aus
			$path = dirname(__DIR__) . '/HAdevice/module.json';
			if (!file_exists($path)) {
				return '';
			}
			$data = json_decode(file_get_contents($path), true);
			return $data['id'] ?? '';
		}


	}